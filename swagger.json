{
  "swagger": "2.0",
  "info": {
    "description": "Result Processing Api Documentation",
    "version": "1.0.0", 
    "title": "Result Processing Api Documentations",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "apiteam@swagger.io"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "basePath": "/api/v1",
  "tags": [
    {
      "name": "Auth",
      "description": "Everything Authentication"
    },
    {
      "name": "Users",
      "description": "Users related api"
    },
    {
      "name": "Configs",
      "description": "Configs related api"
    }
  ],
  "securityDefinitions": {
    "Bearer": {
      "type": "apiKey",
      "name": "Authorization", 
      "in": "header",
      "description": "Enter JWT Bearer token as **Bearer &lt;token>**"
    }
  },
  "paths": {
    "/register": {
      "post": {
        "tags": ["Auth"],
        "summary": "Register a new user",
        "description": "Creates a new user account",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "user",
            "description": "User registration details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/register"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User registered successfully",
            "schema": {
              "$ref": "#/definitions/registerResponse"
            }
          },
          "400": {
            "description": "Invalid input or email already exists"
          }
        }
      }
    },
    "/login": {
      "post": {
        "tags": ["Auth"],
        "summary": "User login",
        "description": "Authenticate user and get JWT token",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "credentials",
            "description": "Login credentials",
            "required": true,
            "schema": {
              "$ref": "#/definitions/login"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Login successful",
            "schema": {
              "$ref": "#/definitions/loginResponse"
            }
          },
          "401": {
            "description": "Invalid credentials"
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": ["Users"],
        "summary": "Get all users",
        "description": "Get list of all users (Admin only)",
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of users",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Admin access required"
          }
        }
      }
    },
    "/users/profile": {
      "get": {
        "tags": ["Users"],
        "summary": "Get user profile",
        "description": "Get logged in user's profile",
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "User profile",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "put": {
        "tags": ["Users"],
        "summary": "Update user profile",
        "description": "Update logged in user's profile",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "user",
            "description": "Updated user data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateUser"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Profile updated successfully",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "tags": ["Users"],
        "summary": "Get user by ID",
        "description": "Get user by ID (Admin only)",
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "User ID"
          }
        ],
        "responses": {
          "200": {
            "description": "User found",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Admin access required"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "delete": {
        "tags": ["Users"],
        "summary": "Delete user",
        "description": "Delete user by ID (Admin only)",
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "User ID"
          }
        ],
        "responses": {
          "200": {
            "description": "User deleted successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Admin access required"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/addStudentData": {
      "post": {
        "tags": ["Users"],
        "summary": "Add student data",
        "description": "Add new student data (Admin/ClassAdmin only)",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "studentData",
            "description": "Student information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StudentData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Student data added successfully",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Student data added successfully"
                },
                "data": {
                  "$ref": "#/definitions/StudentData"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Admin/ClassAdmin access required"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/config": {
      "post": {
        "tags": ["Configs"],
        "summary": "Create a new config",
        "description": "Create a new config (Admin/ClassAdmin only)",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "config",
            "description": "Config information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Config"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Config created successfully"
          }
        }
      }
    },
    "/configs": {
      "get": {
        "tags": ["Configs"],
        "summary": "Get all configs",
        "description": "Get all configs (Admin/ClassAdmin only)",
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of configs",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Config"
              }
            }
          }
        }
      }
    },
    "/configs/{id}": {
      "get": {
        "tags": ["Configs"],
        "summary": "Get config by ID",
        "description": "Get a single config by ID (Admin/ClassAdmin only)",
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Config ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Config found",
            "schema": {
              "$ref": "#/definitions/Config"
            }
          },
          "404": {
            "description": "Config not found"
          }
        }
      },
      "put": {
        "tags": ["Configs"], 
        "summary": "Update config",
        "description": "Update a config by ID (Admin/ClassAdmin only)",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Config ID",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "config",
            "description": "Updated config information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Config"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Config updated successfully",
            "schema": {
              "$ref": "#/definitions/Config"
            }
          },
          "404": {
            "description": "Config not found"
          }
        }
      },
      "delete": {
        "tags": ["Configs"],
        "summary": "Delete config",
        "description": "Delete a config by ID (Admin/ClassAdmin only)", 
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Config ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Config deleted successfully"
          },
          "404": {
            "description": "Config not found"
          }
        }
      }
    },
    "/configs/slug/{slug}": {
      "get": {
        "tags": ["Configs"],
        "summary": "Get config by slug",
        "description": "Get a single config by slug (Admin/ClassAdmin only)",
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "slug",
            "description": "Config slug",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Config found",
            "schema": {
              "$ref": "#/definitions/Config"
            }
          },
          "404": {
            "description": "Config not found"
          }
        }
      }
    }
  },
  "definitions": {
    "register": {
      "type": "object",
      "required": ["firstName", "lastName", "email", "password"],
      "properties": {
        "firstName": {
          "type": "string",
          "example": "John"
        },
        "lastName": {
          "type": "string",
          "example": "Doe"
        },
        "email": {
          "type": "string",
          "example": "john@example.com"
        },
        "password": {
          "type": "string",
          "example": "password123"
        },
        "phoneNumber": {
          "type": "string",
          "example": "1234567890"
        },
        "address": {
          "type": "string",
          "example": "123 Main St"
        },
        "dateOfBirth": {
          "type": "string",
          "example": "1990-01-01"
        }
      }
    },
    "registerResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "example": "User registered successfully"
        },
        "userId": {
          "type": "string",
          "example": "60d5ecb74d5c3d1b5c5c5c5c"
        }
      }
    },
    "login": {
      "type": "object",
      "required": ["email", "password"],
      "properties": {
        "email": {
          "type": "string",
          "example": "john@example.com"
        },
        "password": {
          "type": "string",
          "example": "password123"
        }
      }
    },
    "loginResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "example": "Login successful"
        },
        "_id": {
          "type": "string",
          "example": "60d5ecb74d5c3d1b5c5c5c5c"
        },
        "email": {
          "type": "string",
          "example": "john@example.com"
        },
        "token": {
          "type": "string",
          "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        }
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string",
          "example": "60d5ecb74d5c3d1b5c5c5c5c"
        },
        "firstName": {
          "type": "string",
          "example": "John"
        },
        "lastName": {
          "type": "string",
          "example": "Doe"
        },
        "email": {
          "type": "string",
          "example": "john@example.com"
        },
        "phoneNumber": {
          "type": "string",
          "example": "1234567890"
        },
        "userType": {
          "type": "string",
          "enum": ["superadmin", "classadmin", "student"],
          "example": "student"
        },
        "userStatus": {
          "type": "string",
          "enum": ["Active", "Pending", "Deactivated"],
          "example": "Active"
        },
        "address": {
          "type": "string",
          "example": "123 Main St"
        },
        "studentId": {
          "type": "string",
          "example": "1234567890"
        },
        "dateOfBirth": {
          "type": "string",
          "example": "1990-01-01"
        },
        "religion": {
          "type": "string",
          "example": "Islam"
        },
        "group": {
          "type": "string",
          "example": "Group A"
        },
        "fatherName": {
          "type": "string",
          "example": "Father Name"
        },
        "motherName": {
          "type": "string",
          "example": "Mother Name"
        }, 
        "shift": {
          "type": "string",
          "example": "Morning"
        },
        "section": {
          "type": "string",
          "example": "Section A"
        },
        "class": {
          "type": "string",
          "example": "Class 10"
        }
      }
    },
    "UpdateUser": {
      "type": "object",
      "properties": {
        "firstName": {
          "type": "string",
          "example": "John"
        },
        "lastName": {
          "type": "string",
          "example": "Doe"
        },
        "phoneNumber": {
          "type": "string",
          "example": "1234567890"
        },
        "address": {
          "type": "string",
          "example": "123 Main St"
        },
        "dateOfBirth": {
          "type": "string",
          "example": "1990-01-01"
        },
        "nid": {
          "type": "string",
          "example": "1234567890"
        },
        "passport": {
          "type": "string",
          "example": "AB1234567"
        },
        "postalCode": {
          "type": "string",
          "example": "12345"
        }
      }
    },
    "StudentData": {
      "type": "object",
      "required": ["firstName", "lastName", "studentId", "class"],
      "properties": {
        "firstName": {
          "type": "string",
          "example": "John"
        },
        "lastName": {
          "type": "string",
          "example": "Doe"
        },
        "studentId": {
          "type": "string",
          "example": "2024001"
        },
        "class": {
          "type": "string",
          "example": "Class 10"
        },
        "section": {
          "type": "string",
          "example": "Section A"
        },
        "shift": {
          "type": "string",
          "example": "Morning"
        },
        "group": {
          "type": "string",
          "example": "Science"
        },
        "religion": {
          "type": "string",
          "example": "Islam"
        },
        "dateOfBirth": {
          "type": "string",
          "format": "date",
          "example": "2000-01-01"
        },
        "phoneNumber": {
          "type": "string",
          "example": "1234567890"
        },
        "email": {
          "type": "string",
          "format": "email",
          "example": "john.doe@example.com"
        },
        "address": {
          "type": "string",
          "example": "123 School Street"
        },
        "fatherName": {
          "type": "string",
          "example": "James Doe"
        },
        "motherName": {
          "type": "string",
          "example": "Jane Doe"
        }
      }
    },
    "Config": {
      "type": "object",
      "properties": {
        "slug": {
          "type": "string",
          "example": "Class"
        },
        "key": {
          "type": "string",
          "example": "Class-10"
        },
        "value": { 
          "type": "string",
          "example": "10"
        }
      }
    }
  }
}
