{
  "swagger": "2.0",
  "info": {
    "description": "Result Processing Api Documentation",
    "version": "1.0.0",
    "title": "Result Processing Api Documentations",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "apiteam@swagger.io"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "basePath": "/api/v1",
  "tags": [
    {
      "name": "Auth",
      "description": "Everything Authentication"
    },
    {
      "name": "Users",
      "description": "Users related api"
    },
    {
      "name": "Configs",
      "description": "Configs related api"
    },
    {
      "name": "ClassVsSubject",
      "description": "Class with subject related api"
    }
  ],
  "securityDefinitions": {
    "Bearer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header",
      "description": "Enter JWT Bearer token as **Bearer &lt;token>**"
    }
  },
  "paths": {
    "/register": {
      "post": {
        "tags": ["Auth"],
        "summary": "Register a new user",
        "description": "Creates a new user account",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "user",
            "description": "User registration details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/register"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User registered successfully",
            "schema": {
              "$ref": "#/definitions/registerResponse"
            }
          },
          "400": {
            "description": "Invalid input or email already exists"
          }
        }
      }
    },
    "/login": {
      "post": {
        "tags": ["Auth"],
        "summary": "User login",
        "description": "Authenticate user and get JWT token",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "credentials",
            "description": "Login credentials",
            "required": true,
            "schema": {
              "$ref": "#/definitions/login"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Login successful",
            "schema": {
              "$ref": "#/definitions/loginResponse"
            }
          },
          "401": {
            "description": "Invalid credentials"
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": ["Users"],
        "summary": "Get all users",
        "description": "Get list of all users (Admin only)",
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of users",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Admin access required"
          }
        }
      }
    },
    "/users/profile": {
      "get": {
        "tags": ["Users"],
        "summary": "Get user profile",
        "description": "Get logged in user's profile",
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "User profile",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "put": {
        "tags": ["Users"],
        "summary": "Update user profile",
        "description": "Update logged in user's profile",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "user",
            "description": "Updated user data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateUser"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Profile updated successfully",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "tags": ["Users"],
        "summary": "Get user by ID",
        "description": "Get user by ID (Admin only)",
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "User ID"
          }
        ],
        "responses": {
          "200": {
            "description": "User found",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Admin access required"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "delete": {
        "tags": ["Users"],
        "summary": "Delete user",
        "description": "Delete user by ID (Admin only)",
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "User ID"
          }
        ],
        "responses": {
          "200": {
            "description": "User deleted successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Admin access required"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/config": {
      "post": {
        "tags": ["Configs"],
        "summary": "Create a new config",
        "description": "Create a new config (Admin/ClassAdmin only)",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "config",
            "description": "Config information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Config"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Config created successfully"
          }
        }
      }
    },
    "/configs": {
      "get": {
        "tags": ["Configs"],
        "summary": "Get all configs",
        "description": "Get all configs (Admin/ClassAdmin only)",
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of configs",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Config"
              }
            }
          }
        }
      }
    },
    "/configs/{id}": {
      "get": {
        "tags": ["Configs"],
        "summary": "Get config by ID",
        "description": "Get a single config by ID (Admin/ClassAdmin only)",
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Config ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Config found",
            "schema": {
              "$ref": "#/definitions/Config"
            }
          },
          "404": {
            "description": "Config not found"
          }
        }
      },
      "put": {
        "tags": ["Configs"],
        "summary": "Update config",
        "description": "Update a config by ID (Admin/ClassAdmin only)",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Config ID",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "config",
            "description": "Updated config information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Config"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Config updated successfully",
            "schema": {
              "$ref": "#/definitions/Config"
            }
          },
          "404": {
            "description": "Config not found"
          }
        }
      },
      "delete": {
        "tags": ["Configs"],
        "summary": "Delete config",
        "description": "Delete a config by ID (Admin/ClassAdmin only)",
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Config ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Config deleted successfully"
          },
          "404": {
            "description": "Config not found"
          }
        }
      }
    },
    "/configs/slug/{slug}": {
      "get": {
        "tags": ["Configs"],
        "summary": "Get config by slug",
        "description": "Get a single config by slug (Admin/ClassAdmin only)",
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "slug",
            "description": "Config slug",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Config found",
            "schema": {
              "$ref": "#/definitions/Config"
            }
          },
          "404": {
            "description": "Config not found"
          }
        }
      }
    },
    "/result/create": {
      "post": {
        "tags": ["Results"],
        "summary": "Create a new result",
        "description": "Create a new result record",
        "produces": ["application/json"],
        "consumes": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Result object",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "studentId": {
                  "type": "number",
                  "example": 12345
                },
                "session": {
                  "type": "string",
                  "example": "2023-2024"
                },
                "term": {
                  "type": "string",
                  "example": "Fall"
                },
                "subject": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "subjectID": {
                        "type": "string",
                        "example": "MATH101"
                      },
                      "subjective": {
                        "type": "number",
                        "example": 85
                      },
                      "objective": {
                        "type": "number",
                        "example": 90
                      },
                      "practical": {
                        "type": "number",
                        "example": 95
                      },
                      "totalMarks": {
                        "type": "number",
                        "example": 270
                      }
                    }
                  }
                },
                "totalMarks": {
                  "type": "number",
                  "example": 270
                },
                "grade": {
                  "type": "string",
                  "example": "A+"
                },
                "remarks": {
                  "type": "string",
                  "example": "Excellent performance"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Result created successfully",
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "example": "60d5ecb74d5c3d1b5c5c5c5c"
                },
                "studentId": {
                  "type": "number",
                  "example": 12345
                },
                "session": {
                  "type": "string",
                  "example": "2023-2024"
                },
                "term": {
                  "type": "string",
                  "example": "Fall"
                },
                "subject": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "example": {
                      "subjectID": "MATH101",
                      "subjective": 85,
                      "objective": 90,
                      "practical": 95,
                      "totalMarks": 270
                    }
                  }
                },
                "totalMarks": {
                  "type": "number",
                  "example": 270
                },
                "grade": {
                  "type": "string",
                  "example": "A+"
                },
                "remarks": {
                  "type": "string",
                  "example": "Excellent performance"
                },
                "createdAt": {
                  "type": "string",
                  "example": "2023-09-20T12:00:00.000Z"
                }
              }
            }
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/result/individual": {
      "post": {
        "tags": ["Results"],
        "summary": "Get individual result",
        "description": "Get individual result",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Result object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IndividualResult"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Result fetched successfully",
            "schema": {
              "$ref": "#/definitions/IndividualResult"
            }
          }
        }
      }
    },
    "/addStudentData": {
      "post": {
        "tags": ["Students"],
        "summary": "Add student data",
        "description": "Add new student data (Admin/ClassAdmin only)",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "in": "body",
            "name": "studentData",
            "description": "Student information",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StudentData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Student data added successfully",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Student data added successfully"
                },
                "data": {
                  "$ref": "#/definitions/StudentData"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - Admin/ClassAdmin access required"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/getAllStudent": {
      "get": {
        "tags": ["Students"],
        "summary": "Get all students",
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Retrieve a list of all students",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                   
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/student/{id}": {
      "get": {
        "tags": ["Students"],
        "summary": "Get student by ID",
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the student",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                 
                }
              }
            }
          },
          "404": {
            "description": "Student not found"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "put": {
        "tags": ["Students"],
        "summary": "Update student",
       "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the student",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
               
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Student updated successfully",
            "content": {
              "application/json": {
                "schema": {
                
                }
              }
            }
          },
          "404": {
            "description": "Student not found"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": ["Students"],
        "summary": "Delete student",
         "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the student",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Student deleted successfully"
          },
          "404": {
            "description": "Student not found"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    }
    ,
    "/class": {
      "post": {
        "tags": ["Classes"],
        "summary": "Create a new class",
        "security": [
          {
            "Bearer": []
          }
        ],
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": ["name", "value"],
              "properties": {
                "name": {
                  "type": "string",
                  "example": "X"
                },
                "value": {
                  "type": "string",
                  "example": "10"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Class created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Class created successfully"
                    },
                    "class": {
                      "type": "object",
                      "properties": {
                        "_id": {
                          "type": "string",
                          "example": "60d5ecb74d5c3d1b5c5c5c5c"
                        },
                        "name": {
                          "type": "string",
                          "example": "Class 10"
                        },
                        "value": {
                          "type": "string",
                          "example": "10"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Class with the same name and value already exists"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "get": {
        "tags": ["Classes"],
        "summary": "Get all classes",
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Classes fetched successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Classes fetched successfully"
                    },
                    "classes": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "_id": {
                            "type": "string",
                            "example": "60d5ecb74d5c3d1b5c5c5c5c"
                          },
                          "name": {
                            "type": "string",
                            "example": "Class 10"
                          },
                          "value": {
                            "type": "string",
                            "example": "10"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/class/{id}": {
      "get": {
        "tags": ["Classes"],
        "summary": "Get class by ID",
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the class",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Class fetched successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Class fetched successfully"
                    },
                    "className": {
                      "type": "object",
                      "properties": {
                        "_id": {
                          "type": "string",
                          "example": "60d5ecb74d5c3d1b5c5c5c5c"
                        },
                        "name": {
                          "type": "string",
                          "example": "Class 10"
                        },
                        "value": {
                          "type": "string",
                          "example": "10"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Class not found"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "put": {
        "tags": ["Classes"],
        "summary": "Update class",
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the class",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "Class 10"
                  },
                  "value": {
                    "type": "string",
                    "example": "10"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Class updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Class updated successfully"
                    },
                    "className": {
                      "type": "object",
                      "properties": {
                        "_id": {
                          "type": "string",
                          "example": "60d5ecb74d5c3d1b5c5c5c5c"
                        },
                        "name": {
                          "type": "string",
                          "example": "Class 10"
                        },
                        "value": {
                          "type": "string",
                          "example": "10"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Class not found"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "tags": ["Classes"],
        "summary": "Delete class",
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "ID of the class",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Class deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Class deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Class not found"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/class-sub/create":{
      "post":{
        "tags":["ClassVsSubject"],
        "summary": "Creates a new subject in class",
        "description": "Allows an admin to create a new class and their subject with the provided information.",
        "security": [
          {
            "Bearer": []
          }
        ],
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "classWithSubject",
            "description": "class With Subject data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateClassSub"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Class with sun created successfully"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/class-subjects":{
      "get":{
        "tags":["ClassVsSubject"],
        "summary": "Retrieves all Class with sub",
        "description": "Gets a list of all class with sub",
        "produces": ["application/json"],
          "responses": {
            "200": {
              "description": "A list of class with sub"
            }
          }
      }
    },
    "/class-subject/{id}":{
      "get":{
        "tags":["ClassVsSubject"],
        "summary": "Retrieves a single class subjects",
          "description": "Gets a single class subjects by ID.",
          "produces": ["application/json"],
          "parameters": [
            {
              "in": "path",
              "name": "id",
              "required": true,
              "type": "string",
              "description": "ID of the class subjects to retrieve"
            }
          ],
          "responses": {
            "200": {
              "description": "Detailed information about the class subjects"
            },
            "404": {
              "description": "class not found"
            }
          }
      },
      "put": {
        "tags": ["ClassVsSubject"],
        "summary": "Updates a single class subjects",
        "description": "Updates the details of an existing class subjects by ID.",
        "security": [
          {
            "Bearer": []
          }
        ],
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string",
            "description": "ID of the class subjects to update"
          },
          {
            "in": "body",
            "name": "classWithSubject",
            "description": "class subjects data to update",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateBlog"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "class subjects updated successfully"
          },
          "404": {
            "description": "class subjects not found"
          },
          "400": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": ["ClassVsSubject"],
        "summary": "Deletes a single class subjects",
        "description": "Deletes a class subjects by ID.",
        "security": [
          {
            "Bearer": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string",
            "description": "ID of the class subjects to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "class subjects deleted successfully"
          },
          "404": {
            "description": "class subjects not found"
          }
        }
      }
    }
  },
  "definitions": {
    "register": {
      "type": "object",
      "required": ["firstName", "lastName", "email", "password"],
      "properties": {
        "firstName": {
          "type": "string",
          "example": "John"
        },
        "lastName": {
          "type": "string",
          "example": "Doe"
        },
        "email": {
          "type": "string",
          "example": "john@example.com"
        },
        "password": {
          "type": "string",
          "example": "password123"
        },
        "phoneNumber": {
          "type": "string",
          "example": "1234567890"
        },
        "address": {
          "type": "string",
          "example": "123 Main St"
        },
        "dateOfBirth": {
          "type": "string",
          "example": "1990-01-01"
        }
      }
    },
    "registerResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "example": "User registered successfully"
        },
        "userId": {
          "type": "string",
          "example": "60d5ecb74d5c3d1b5c5c5c5c"
        }
      }
    },
    "login": {
      "type": "object",
      "required": ["email", "password"],
      "properties": {
        "email": {
          "type": "string",
          "example": "classadmin@example.com"
        },
        "password": {
          "type": "string",
          "example": "password123"
        }
      }
    },
    "loginResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "example": "Login successful"
        },
        "_id": {
          "type": "string",
          "example": "60d5ecb74d5c3d1b5c5c5c5c"
        },
        "email": {
          "type": "string",
          "example": "john@example.com"
        },
        "token": {
          "type": "string",
          "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        }
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string",
          "example": "60d5ecb74d5c3d1b5c5c5c5c"
        },
        "firstName": {
          "type": "string",
          "example": "John"
        },
        "lastName": {
          "type": "string",
          "example": "Doe"
        },
        "email": {
          "type": "string",
          "example": "john@example.com"
        },
        "phoneNumber": {
          "type": "string",
          "example": "1234567890"
        },
        "userType": {
          "type": "string",
          "enum": ["superadmin", "classadmin", "student"],
          "example": "student"
        },
        "userStatus": {
          "type": "string",
          "enum": ["Active", "Pending", "Deactivated"],
          "example": "Active"
        },
        "address": {
          "type": "string",
          "example": "123 Main St"
        },
        "studentId": {
          "type": "string",
          "example": "1234567890"
        },
        "dateOfBirth": {
          "type": "string",
          "example": "1990-01-01"
        },
        "religion": {
          "type": "string",
          "example": "Islam"
        },
        "group": {
          "type": "string",
          "example": "Group A"
        },
        "fatherName": {
          "type": "string",
          "example": "Father Name"
        },
        "motherName": {
          "type": "string",
          "example": "Mother Name"
        },
        "shift": {
          "type": "string",
          "example": "Morning"
        },
        "section": {
          "type": "string",
          "example": "Section A"
        },
        "class": {
          "type": "string",
          "example": "Class 10"
        }
      }
    },
    "UpdateUser": {
      "type": "object",
      "properties": {
        "firstName": {
          "type": "string",
          "example": "John"
        },
        "lastName": {
          "type": "string",
          "example": "Doe"
        },
        "phoneNumber": {
          "type": "string",
          "example": "1234567890"
        },
        "address": {
          "type": "string",
          "example": "123 Main St"
        },
        "dateOfBirth": {
          "type": "string",
          "example": "1990-01-01"
        },
        "nid": {
          "type": "string",
          "example": "1234567890"
        },
        "passport": {
          "type": "string",
          "example": "AB1234567"
        },
        "postalCode": {
          "type": "string",
          "example": "12345"
        }
      }
    },
    "StudentData": {
      "type": "object",
      "required": ["firstName", "lastName", "studentId", "class"],
      "properties": {
        "studentId": {
          "type": "string",
          "example": "2024001"
        },
        "shift": {
          "type": "string",
          "example": "Morning"
        },
        "group": {
          "type": "string",
          "example": "Science"
        },
        "section": {
          "type": "string",
          "example": "A"
        },

        "roll": {
          "type": "string",
          "example": "12"
        },

        "studentName": {
          "type": "string",
          "example": "Fahim Sarkar"
        },

        "fatherName": {
          "type": "string",
          "example": "Hasib Sarkar"
        },
        "gender": {
          "type": "string",
          "example": "Male"
        },
        "religion": {
          "type": "string",
          "example": "Islam"
        },
        "mobile": {
          "type": "string",
          "example": "1234567890"
        },
        "class": {
          "type": "string",
          "example": "Class 10"
        },
        "year": {
          "type": "string",
          "example": "2024"
        }
      }
    },
    "Config": {
      "type": "object",
      "properties": {
        "slug": {
          "type": "string",
          "example": "Class"
        },
        "key": {
          "type": "string",
          "example": "Class-10"
        },
        "value": {
          "type": "string",
          "example": "10"
        }
      }
    },
    "IndividualResult": {
      "type": "object",
      "properties": {
        "section": {
          "type": "string",
          "example": "A"
        },
        "className": {
          "type": "string",
          "example": "9"
        },
        "shift": {
          "type": "string",
          "example": "morning"
        },
        "session": {
          "type": "string",
          "example": "2024"
        },
        "term": {
          "type": "string",
          "example": "Final"
        },
        "studentId": {
          "type": "string",
          "example": "1"
        }
      }
    },
    "CreateClassSub":{
      "type":"object",
      "required":["class"],
      "properties":{
        "class":{
          "type":"string"
        },
        "subjects":{
         "type":"string"
        }
      }
    }
  }
}
